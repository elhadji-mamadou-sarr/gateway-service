name: CI - Gateway Service

on:
  push:
    branches:
      - master
      - develop
      - preprod
      - prod
  pull_request:

jobs:
  build:
    name: Build du projet
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gateway-service

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: Configurer JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Compiler le projet
        run: mvn clean install -DskipTests

  sonar:
    name: Tests et analyse SonarQube
    needs: build
    runs-on: ubuntu-latest
    env:
      SONAR_PROJECT_KEY: elhadji-mamadou-sarr_gateway-service
      SONAR_ORG: elhadji-mamadou-sarr
      SONAR_HOST: https://sonarcloud.io

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

#      - name: Exécuter les tests unitaires
#        run: mvn test

      - name: Analyse avec SonarQube
        run: mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG -Dsonar.host.url=$SONAR_HOST
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  package:
    name: Packaging des artefacts
    needs: sonar
    runs-on: ubuntu-latest

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: Télécharger les artefacts de build
        uses: actions/upload-artifact@v4
        with:
          name: gateway-artifact
          path: target/*.jar

  docker_build:
    name: Création et push de l'image Docker
    needs: package
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gateway-service

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: Télécharger les artefacts de build
        uses: actions/download-artifact@v4
        with:
          name: gateway-artifact
          path: target

      - name: Se connecter à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Construire et pousser l'image Docker
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          IMAGE_TAG=${{ env.IMAGE_NAME }}:$TAG
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

  deploy_k8s:
    name: Déploiement Kubernetes
    needs: docker_build
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gateway-service

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: Installer kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configurer AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1

      - name: Mettre à jour le contexte Kubernetes pour EKS
        run: |
          aws eks update-kubeconfig --name gateway-service-cluster --region eu-north-1
          kubectl config current-context

      - name: Déployer sur Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
          kubectl apply -f k8s/monitoring-namespace.yaml
          kubectl apply -f k8s/prometheus-configmap.yaml
          kubectl apply -f k8s/prometheus-deployment.yaml
          kubectl apply -f k8s/prometheus-service.yaml
          
          kubectl apply -f k8s/grafana-deployment.yaml
          kubectl apply -f k8s/grafana-service.yaml


#          if [[ "$TAG" == "master" ]]; then
#            kubectl apply -f k8s/namespace.yaml
#            kubectl apply -f k8s/deployment.yaml
#            kubectl apply -f k8s/service.yaml

#          elif [[ "$TAG" == "staging" ]]; then
#            kubectl apply -f k8s/staging/namespace.yaml
#            kubectl apply -f k8s/staging/deployment.yaml
#            kubectl apply -f k8s/staging/service.yaml
#          elif [[ "$TAG" == "preprod" ]]; then
#            kubectl apply -f k8s/preprod/namespace.yaml
#            kubectl apply -f k8s/preprod/deployment.yaml
#            kubectl apply -f k8s/preprod/service.yaml
#          elif [[ "$TAG" == "prod" ]]; then
#            kubectl apply -f k8s/namespace.yaml
#            kubectl apply -f k8s/deployment.yaml
#            kubectl apply -f k8s/service.yaml
#          fi