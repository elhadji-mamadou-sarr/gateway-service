name: CI - Gateway Service

on:
  push:
    branches:
      - master
      - develop
      - preprod
      - staging
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: elhadji01/gateway-service
      REGISTRY_DEV: elhadji01/dev-registry
      REGISTRY_PROD: elhadji01/prod-registry
      SONAR_PROJECT_KEY: elhadji-mamadou-sarr_gateway-service
      SONAR_ORG: elhadji-mamadou-sarr
      SONAR_HOST: https://sonarcloud.io

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: üîß Configurer JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Build du projet
        run: mvn clean install -DskipTests

      - name: üéØ V√©rification SonarQube
        run: mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG -Dsonar.host.url=$SONAR_HOST
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: üìÇ Stocker les artefacts de build
        uses: actions/upload-artifact@v4
        with:
          name: gateway-artifact
          path: target/*.jar

  docker:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gateway-service

    steps:
      - name: üõé Cloner le repo
        uses: actions/checkout@v3

      - name: üì• T√©l√©charger les artefacts de build
        uses: actions/download-artifact@v4
        with:
          name: gateway-artifact
          path: target

      - name: üîë Login √† Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üè∑ Cr√©ation et Push de l'image Docker
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          IMAGE_TAG=${{ env.IMAGE_NAME }}:$TAG
          echo "Cr√©ation de l'image Docker avec le tag : $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: elhadji01/gateway-service

    steps:
      - name: üõé Cloner le repo
        uses: actions/checkout@v3

      - name: üöÄ D√©ploiement selon l'environnement
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          if [[ "$TAG" == "master" ]]; then
            echo "D√©ploiement en DEV sur Docker..."
            docker run -d -p 8080:8080 ${{ env.IMAGE_NAME }}:master
          elif [[ "$TAG" == "staging" ]]; then
            echo "D√©ploiement en STAGING sur Docker..."
            docker run -d -p 8080:8080 ${{ env.IMAGE_NAME }}:staging
          elif [[ "$TAG" == "preprod" || "$TAG" == "prod" ]]; then
            echo "D√©ploiement en K8s (non configur√© pour l‚Äôinstant)"
            # Ici, on ajoutera plus tard le script pour d√©ployer sur Kubernetes
          fi